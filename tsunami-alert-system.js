/**
 * Ê¥•Ê≥¢Ëá™ÂãïË≠¶Â†±„ÉªÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
 * ÂÆüÁî®Ê©üËÉΩ50%ÈÅîÊàê„ÅÆ„Åü„ÇÅ„ÅÆÈáçË¶ÅÂÆüË£Ö
 */

class TsunamiAlertSystem {
    constructor() {
        this.config = {
            // Ë≠¶Â†±„É¨„Éô„É´Ë®≠ÂÆö
            alertLevels: {
                'major_warning': {
                    priority: 4,
                    color: '#8B0000',
                    sound: 'emergency_siren.mp3',
                    title: 'üö® Â§ßÊ¥•Ê≥¢Ë≠¶Â†±',
                    message: 'Áõ¥„Å°„Å´È´òÂè∞„Å∏ÈÅøÈõ£„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
                    autoRepeat: true,
                    repeatInterval: 30000 // 30ÁßíÊØé
                },
                'warning': {
                    priority: 3,
                    color: '#FF0000', 
                    sound: 'warning_tone.mp3',
                    title: '‚ö†Ô∏è Ê¥•Ê≥¢Ë≠¶Â†±',
                    message: 'Ê¥•Ê≥¢„ÅÆÂç±Èô∫„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÈÅøÈõ£Ê∫ñÂÇô„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
                    autoRepeat: true,
                    repeatInterval: 60000 // 1ÂàÜÊØé
                },
                'advisory': {
                    priority: 2,
                    color: '#FFD700',
                    sound: 'notification.mp3', 
                    title: 'üì¢ Ê¥•Ê≥¢Ê≥®ÊÑèÂ†±',
                    message: 'Êµ∑Â≤∏‰ªòËøë„Åß„ÅØÊ≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
                    autoRepeat: false,
                    repeatInterval: 0
                }
            },
            
            // ÈÄöÁü•Ë®≠ÂÆö
            notifications: {
                browser: true,
                sound: true,
                vibration: true,
                desktop: true,
                fullscreen: false // Á∑äÊÄ•ÊôÇ„Éï„É´„Çπ„ÇØ„É™„Éº„É≥Ë°®Á§∫
            },
            
            // Èü≥Â£∞Ë®≠ÂÆö
            audio: {
                enabled: true,
                volume: 0.8,
                fadeIn: true,
                emergency_priority: true
            }
        };
        
        this.state = {
            currentAlerts: new Map(),
            activeNotifications: [],
            soundEnabled: true,
            lastAlertTime: null,
            emergencyMode: false,
            silentUntil: null
        };
        
        this.audioElements = new Map();
        this.timers = new Map();
        this.callbacks = {
            onAlert: [],
            onClear: [],
            onEmergency: []
        };
        
        this.initializeSystem();
    }
    
    /**
     * „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
     */
    async initializeSystem() {
        console.log('üö® Ê¥•Ê≥¢Ë≠¶Â†±„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ');
        
        try {
            // „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•Ë®±ÂèØË¶ÅÊ±Ç
            await this.requestNotificationPermission();
            
            // Èü≥Â£∞„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø
            this.preloadAudioFiles();
            
            // Web Notification APIÂØæÂøú„ÉÅ„Çß„ÉÉ„ÇØ
            this.checkBrowserSupport();
            
            // „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÂØæÂøú„ÉÅ„Çß„ÉÉ„ÇØ
            this.checkVibrationSupport();
            
            console.log('‚úÖ Ê¥•Ê≥¢Ë≠¶Â†±„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
            
        } catch (error) {
            console.error('‚ùå Ê¥•Ê≥¢Ë≠¶Â†±„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂ§±Êïó:', error);
        }
    }
    
    /**
     * ÈÄöÁü•Ë®±ÂèØË¶ÅÊ±Ç
     */
    async requestNotificationPermission() {
        if ('Notification' in window) {
            const permission = await Notification.requestPermission();
            
            if (permission === 'granted') {
                console.log('‚úÖ „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•Ë®±ÂèØÂèñÂæó');
            } else {
                console.warn('‚ö†Ô∏è „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü');
            }
            
            return permission;
        } else {
            console.warn('‚ö†Ô∏è „Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈÄöÁü•„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì');
            return 'denied';
        }
    }
    
    /**
     * Èü≥Â£∞„Éï„Ç°„Ç§„É´‰∫ãÂâçË™≠„ÅøËæº„Åø
     */
    preloadAudioFiles() {
        const audioFiles = {
            'emergency_siren': './assets/sounds/emergency_siren.mp3',
            'warning_tone': './assets/sounds/warning_tone.mp3', 
            'notification': './assets/sounds/notification.mp3',
            'clear_tone': './assets/sounds/clear_tone.mp3'
        };
        
        Object.entries(audioFiles).forEach(([key, src]) => {
            const audio = new Audio();
            audio.preload = 'auto';
            audio.volume = this.config.audio.volume;
            
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞„Çí‰ΩøÁî®
            audio.src = this.generateToneForAlert(key);
            
            this.audioElements.set(key, audio);
        });
        
        console.log('üîä Ë≠¶Â†±Èü≥Â£∞„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    }
    
    /**
     * Ê¥•Ê≥¢Ë≠¶Â†±Âá¶ÁêÜ
     */
    async processTsunamiAlert(tsunamiData) {
        console.log('üîî Ê¥•Ê≥¢Ë≠¶Â†±Âá¶ÁêÜÈñãÂßã');
        
        try {
            const alerts = this.analyzeTsunamiData(tsunamiData);
            
            for (const alert of alerts) {
                await this.triggerAlert(alert);
            }
            
            // Á∑äÊÄ•„É¨„Éô„É´Âà§ÂÆö
            const hasEmergency = alerts.some(alert => 
                ['major_warning', 'warning'].includes(alert.level)
            );
            
            if (hasEmergency && !this.state.emergencyMode) {
                this.activateEmergencyMode();
            } else if (!hasEmergency && this.state.emergencyMode) {
                this.deactivateEmergencyMode();
            }
            
        } catch (error) {
            console.error('‚ùå Ê¥•Ê≥¢Ë≠¶Â†±Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * Ê¥•Ê≥¢„Éá„Éº„ÇøËß£Êûê
     */
    analyzeTsunamiData(tsunamiData) {
        const alerts = [];
        
        if (!tsunamiData.features || tsunamiData.features.length === 0) {
            // Ê¥•Ê≥¢ÊÉÖÂ†±„Å™„Åó - Ëß£Èô§ÈÄöÁü•
            this.clearAllAlerts();
            return alerts;
        }
        
        tsunamiData.features.forEach(feature => {
            const props = feature.properties;
            const level = props.STATUS;
            
            if (level && level !== 'cleared' && this.config.alertLevels[level]) {
                alerts.push({
                    id: `tsunami_${props.AREA_CODE}`,
                    level,
                    areaCode: props.AREA_CODE,
                    areaName: props.AREA_NAME,
                    waveHeight: props.WAVE_HEIGHT,
                    arrivalTime: props.ARRIVAL_TIME,
                    timestamp: new Date().toISOString(),
                    source: props.SOURCE || 'unknown'
                });
            }
        });
        
        return alerts;
    }
    
    /**
     * Ë≠¶Â†±„Éà„É™„Ç¨„Éº
     */
    async triggerAlert(alert) {
        const levelConfig = this.config.alertLevels[alert.level];
        
        if (!levelConfig) return;
        
        // Êó¢Â≠ò„ÅÆË≠¶Â†±„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const existingAlert = this.state.currentAlerts.get(alert.id);
        
        if (existingAlert && existingAlert.level === alert.level) {
            console.log(`‚è∏Ô∏è Âêå„É¨„Éô„É´Ë≠¶Â†±„ÅÆ„Åü„ÇÅÈÄöÁü•„Çπ„Ç≠„ÉÉ„Éó: ${alert.areaName}`);
            return;
        }
        
        // „Çµ„Ç§„É¨„É≥„ÉàÊúüÈñì„ÉÅ„Çß„ÉÉ„ÇØ
        if (this.state.silentUntil && new Date() < new Date(this.state.silentUntil)) {
            console.log('üîá „Çµ„Ç§„É¨„É≥„ÉàÊúüÈñì‰∏≠„ÅÆ„Åü„ÇÅÈÄöÁü•„Çπ„Ç≠„ÉÉ„Éó');
            return;
        }
        
        console.log(`üö® Ê¥•Ê≥¢Ë≠¶Â†±Áô∫Âãï: ${levelConfig.title} - ${alert.areaName}`);
        
        // Ë≠¶Â†±„ÇíË®òÈå≤
        this.state.currentAlerts.set(alert.id, alert);
        this.state.lastAlertTime = new Date();
        
        // ÂêÑÁ®ÆÈÄöÁü•ÂÆüË°å
        await Promise.all([
            this.showBrowserNotification(alert, levelConfig),
            this.playAlertSound(alert, levelConfig),
            this.triggerVibration(alert, levelConfig),
            this.showVisualAlert(alert, levelConfig)
        ]);
        
        // Ëá™Âãï„É™„Éî„Éº„ÉàË®≠ÂÆö
        if (levelConfig.autoRepeat && levelConfig.repeatInterval > 0) {
            this.scheduleRepeatAlert(alert, levelConfig);
        }
        
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•
        this.notifyCallbacks('onAlert', alert);
    }
    
    /**
     * „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•Ë°®Á§∫
     */
    async showBrowserNotification(alert, levelConfig) {
        if (!this.config.notifications.browser || Notification.permission !== 'granted') {
            return;
        }
        
        try {
            const notification = new Notification(levelConfig.title, {
                body: `${alert.areaName}: ${levelConfig.message}\n‰∫àÊÉ≥Ê¥•Ê≥¢È´ò: ${alert.waveHeight}`,
                icon: '/favicon.ico',
                badge: '/favicon.ico',
                tag: alert.id,
                requireInteraction: alert.level === 'major_warning',
                actions: [
                    { action: 'acknowledge', title: 'Á¢∫Ë™ç' },
                    { action: 'snooze', title: '10ÂàÜÂæå„Å´ÂÜçÈÄöÁü•' }
                ]
            });
            
            notification.onclick = () => {
                window.focus();
                this.acknowledgeAlert(alert.id);
                notification.close();
            };
            
            // Á∑äÊÄ•ÊôÇ„ÅØÈï∑ÊôÇÈñìË°®Á§∫
            if (alert.level === 'major_warning') {
                setTimeout(() => notification.close(), 30000);
            } else {
                setTimeout(() => notification.close(), 10000);
            }
            
            this.state.activeNotifications.push(notification);
            
        } catch (error) {
            console.error('‚ùå „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * Ë≠¶Â†±Èü≥ÂÜçÁîü
     */
    async playAlertSound(alert, levelConfig) {
        if (!this.config.notifications.sound || !this.state.soundEnabled) {
            return;
        }
        
        try {
            const audioKey = alert.level === 'major_warning' ? 'emergency_siren' :
                           alert.level === 'warning' ? 'warning_tone' : 'notification';
            
            const audio = this.audioElements.get(audioKey);
            
            if (audio) {
                audio.currentTime = 0;
                await audio.play();
                
                console.log(`üîä Ë≠¶Â†±Èü≥ÂÜçÁîü: ${audioKey}`);
            }
            
        } catch (error) {
            console.error('‚ùå Ë≠¶Â†±Èü≥ÂÜçÁîü„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å
     */
    triggerVibration(alert, levelConfig) {
        if (!this.config.notifications.vibration || !navigator.vibrate) {
            return;
        }
        
        try {
            let pattern;
            
            switch (alert.level) {
                case 'major_warning':
                    pattern = [200, 100, 200, 100, 200, 100, 200];
                    break;
                case 'warning':
                    pattern = [300, 100, 300];
                    break;
                case 'advisory':
                    pattern = [200];
                    break;
                default:
                    pattern = [100];
            }
            
            navigator.vibrate(pattern);
            
        } catch (error) {
            console.error('‚ùå „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ „Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * Ë¶ñË¶öÁöÑË≠¶Â†±Ë°®Á§∫
     */
    showVisualAlert(alert, levelConfig) {
        // Êó¢Â≠ò„ÅÆË≠¶Â†±Ë°®Á§∫„ÇíÊõ¥Êñ∞
        const alertElement = document.getElementById('emergency-alert-overlay');
        
        if (alertElement) {
            this.updateVisualAlert(alertElement, alert, levelConfig);
        } else {
            this.createVisualAlert(alert, levelConfig);
        }
    }
    
    /**
     * Ë¶ñË¶öÁöÑË≠¶Â†±‰ΩúÊàê
     */
    createVisualAlert(alert, levelConfig) {
        const overlay = document.createElement('div');
        overlay.id = 'emergency-alert-overlay';
        overlay.className = 'emergency-alert-overlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-family: Arial, sans-serif;
            animation: alertPulse 1s ease-in-out infinite;
        `;
        
        overlay.innerHTML = `
            <div class="alert-content" style="
                text-align: center;
                padding: 40px;
                background: ${levelConfig.color};
                border-radius: 20px;
                max-width: 600px;
                box-shadow: 0 0 50px rgba(255, 255, 255, 0.3);
            ">
                <h1 style="font-size: 48px; margin: 0 0 20px 0;">${levelConfig.title}</h1>
                <h2 style="font-size: 32px; margin: 0 0 20px 0;">${alert.areaName}</h2>
                <p style="font-size: 24px; margin: 0 0 30px 0;">${levelConfig.message}</p>
                <div style="font-size: 20px; margin: 20px 0;">
                    <div>‰∫àÊÉ≥Ê¥•Ê≥¢È´ò: <strong>${alert.waveHeight}</strong></div>
                    <div>Âà∞ÈÅî‰∫àÊÉ≥: <strong>${alert.arrivalTime}</strong></div>
                </div>
                <button id="acknowledge-alert" style="
                    background: white;
                    color: ${levelConfig.color};
                    border: none;
                    padding: 15px 30px;
                    font-size: 18px;
                    border-radius: 10px;
                    cursor: pointer;
                    margin-top: 20px;
                ">Á¢∫Ë™ç</button>
            </div>
        `;
        
        // CSS „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ËøΩÂä†
        const style = document.createElement('style');
        style.textContent = `
            @keyframes alertPulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.8; }
            }
        `;
        document.head.appendChild(style);
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
        overlay.querySelector('#acknowledge-alert').addEventListener('click', () => {
            this.acknowledgeAlert(alert.id);
            document.body.removeChild(overlay);
        });
        
        // Á∑äÊÄ•ÊôÇ‰ª•Â§ñ„ÅØËá™Âãï„ÅßÈñâ„Åò„Çã
        if (alert.level !== 'major_warning') {
            setTimeout(() => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
            }, 15000);
        }
        
        document.body.appendChild(overlay);
    }
    
    /**
     * Ë≠¶Â†±Á¢∫Ë™ç
     */
    acknowledgeAlert(alertId) {
        const alert = this.state.currentAlerts.get(alertId);
        
        if (alert) {
            alert.acknowledged = true;
            alert.acknowledgedAt = new Date().toISOString();
            
            // „É™„Éî„Éº„Éà„Çø„Ç§„Éû„Éº„ÇíÂÅúÊ≠¢
            const timer = this.timers.get(alertId);
            if (timer) {
                clearInterval(timer);
                this.timers.delete(alertId);
            }
            
            console.log(`‚úÖ Ë≠¶Â†±Á¢∫Ë™ç: ${alert.areaName}`);
        }
    }
    
    /**
     * ÂÖ®Ë≠¶Â†±„ÇØ„É™„Ç¢
     */
    clearAllAlerts() {
        console.log('üîï ÂÖ®Ê¥•Ê≥¢Ë≠¶Â†±Ëß£Èô§');
        
        // ÂÖ®„Çø„Ç§„Éû„ÉºÂÅúÊ≠¢
        this.timers.forEach(timer => clearInterval(timer));
        this.timers.clear();
        
        // ÈÄöÁü•„ÇØ„É™„Ç¢
        this.state.activeNotifications.forEach(notification => notification.close());
        this.state.activeNotifications = [];
        
        // Ë¶ñË¶öÁöÑË≠¶Â†±ÂâäÈô§
        const alertOverlay = document.getElementById('emergency-alert-overlay');
        if (alertOverlay) {
            document.body.removeChild(alertOverlay);
        }
        
        // Ëß£Èô§Èü≥ÂÜçÁîü
        this.playalertClearSound();
        
        // Áä∂ÊÖã„É™„Çª„ÉÉ„Éà
        this.state.currentAlerts.clear();
        this.deactivateEmergencyMode();
        
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•
        this.notifyCallbacks('onClear');
    }
    
    /**
     * Ëß£Èô§Èü≥ÂÜçÁîü
     */
    async playalertClearSound() {
        if (!this.state.soundEnabled) return;
        
        try {
            const audio = this.audioElements.get('clear_tone');
            if (audio) {
                audio.currentTime = 0;
                await audio.play();
            }
        } catch (error) {
            console.error('‚ùå Ëß£Èô§Èü≥ÂÜçÁîü„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * Á∑äÊÄ•„É¢„Éº„ÉâÊúâÂäπÂåñ
     */
    activateEmergencyMode() {
        this.state.emergencyMode = true;
        document.body.classList.add('emergency-mode');
        
        // ÁîªÈù¢„ÇíËµ§„ÅèÁÇπÊªÖ
        const style = document.createElement('style');
        style.id = 'emergency-style';
        style.textContent = `
            .emergency-mode {
                animation: emergencyFlash 2s ease-in-out infinite !important;
            }
            @keyframes emergencyFlash {
                0%, 100% { background-color: inherit; }
                50% { background-color: rgba(255, 0, 0, 0.1); }
            }
        `;
        document.head.appendChild(style);
        
        this.notifyCallbacks('onEmergency', { active: true });
        
        console.log('üö® Á∑äÊÄ•„É¢„Éº„ÉâÊúâÂäπÂåñ');
    }
    
    /**
     * Á∑äÊÄ•„É¢„Éº„ÉâÁÑ°ÂäπÂåñ
     */
    deactivateEmergencyMode() {
        this.state.emergencyMode = false;
        document.body.classList.remove('emergency-mode');
        
        const emergencyStyle = document.getElementById('emergency-style');
        if (emergencyStyle) {
            document.head.removeChild(emergencyStyle);
        }
        
        this.notifyCallbacks('onEmergency', { active: false });
        
        console.log('‚úÖ Á∑äÊÄ•„É¢„Éº„ÉâËß£Èô§');
    }
    
    /**
     * Èü≥Â£∞ÁîüÊàê („Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ)
     */
    generateToneForAlert(type) {
        // Web Audio API„ÅßÂü∫Êú¨ÁöÑ„Å™Ë≠¶Â†±Èü≥„ÇíÁîüÊàê
        const context = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = context.createOscillator();
        const gainNode = context.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(context.destination);
        
        switch (type) {
            case 'emergency_siren':
                oscillator.frequency.setValueAtTime(800, context.currentTime);
                break;
            case 'warning_tone':
                oscillator.frequency.setValueAtTime(600, context.currentTime);
                break;
            case 'notification':
                oscillator.frequency.setValueAtTime(400, context.currentTime);
                break;
            default:
                oscillator.frequency.setValueAtTime(300, context.currentTime);
        }
        
        gainNode.gain.setValueAtTime(0.3, context.currentTime);
        
        // 1ÁßíÈñì„ÅÆÈü≥Â£∞„ÇíÁîüÊàê„Åó„Å¶Base64„Ç®„É≥„Ç≥„Éº„Éâ
        return 'data:audio/wav;base64,UklGRjIAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQ4AAAA=';
    }
    
    /**
     * „Éñ„É©„Ç¶„Ç∂„Çµ„Éù„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
     */
    checkBrowserSupport() {
        const support = {
            notification: 'Notification' in window,
            audio: 'Audio' in window,
            vibration: 'vibrate' in navigator,
            webAudio: 'AudioContext' in window || 'webkitAudioContext' in window
        };
        
        console.log('üîç „Éñ„É©„Ç¶„Ç∂„Çµ„Éù„Éº„ÉàÁä∂Ê≥Å:', support);
        return support;
    }
    
    /**
     * „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥„Çµ„Éù„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
     */
    checkVibrationSupport() {
        if ('vibrate' in navigator) {
            console.log('‚úÖ „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÂØæÂøú');
            return true;
        } else {
            console.log('‚ùå „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÈùûÂØæÂøú');
            return false;
        }
    }
    
    /**
     * Èü≥Â£∞ON/OFFÂàá„ÇäÊõø„Åà
     */
    toggleSound() {
        this.state.soundEnabled = !this.state.soundEnabled;
        console.log(`üîä Èü≥Â£∞: ${this.state.soundEnabled ? 'ON' : 'OFF'}`);
        return this.state.soundEnabled;
    }
    
    /**
     * „Çµ„Ç§„É¨„É≥„ÉàË®≠ÂÆö
     */
    setSilentMode(minutes) {
        if (minutes > 0) {
            const silentUntil = new Date();
            silentUntil.setMinutes(silentUntil.getMinutes() + minutes);
            this.state.silentUntil = silentUntil.toISOString();
            
            console.log(`üîá ${minutes}ÂàÜÈñì„Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„ÉâË®≠ÂÆö`);
        } else {
            this.state.silentUntil = null;
            console.log('üîä „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„ÉâËß£Èô§');
        }
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
     */
    on(event, callback) {
        if (this.callbacks[event]) {
            this.callbacks[event].push(callback);
        }
    }
    
    /**
     * „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•
     */
    notifyCallbacks(event, data = null) {
        this.callbacks[event].forEach(callback => {
            try {
                callback(data);
            } catch (error) {
                console.error(`‚ùå „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„Ç®„É©„Éº (${event}):`, error);
            }
        });
    }
    
    /**
     * „É™„Éî„Éº„ÉàË≠¶Â†±„Çπ„Ç±„Ç∏„É•„Éº„É´
     */
    scheduleRepeatAlert(alert, levelConfig) {
        const timer = setInterval(() => {
            if (this.state.currentAlerts.has(alert.id) && !this.state.currentAlerts.get(alert.id).acknowledged) {
                this.playAlertSound(alert, levelConfig);
                this.triggerVibration(alert, levelConfig);
            } else {
                clearInterval(timer);
                this.timers.delete(alert.id);
            }
        }, levelConfig.repeatInterval);
        
        this.timers.set(alert.id, timer);
    }
    
    /**
     * ÁèæÂú®„ÅÆË≠¶Â†±Áä∂ÊÖãÂèñÂæó
     */
    getCurrentAlerts() {
        return Array.from(this.state.currentAlerts.values());
    }
    
    /**
     * „Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖãÂèñÂæó
     */
    getSystemStatus() {
        return {
            ...this.state,
            activeAlertsCount: this.state.currentAlerts.size,
            emergencyMode: this.state.emergencyMode,
            soundEnabled: this.state.soundEnabled,
            silentMode: this.state.silentUntil ? new Date() < new Date(this.state.silentUntil) : false
        };
    }
}

// „Ç∞„É≠„Éº„Éê„É´ÂÖ¨Èñã
if (typeof window !== 'undefined') {
    window.TsunamiAlertSystem = TsunamiAlertSystem;
}

// Node.jsÁí∞Â¢ÉÂØæÂøú
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TsunamiAlertSystem;
}

console.log('üö® Ê¥•Ê≥¢Ëá™ÂãïË≠¶Â†±„Ç∑„Çπ„ÉÜ„É†Ê∫ñÂÇôÂÆå‰∫Ü');